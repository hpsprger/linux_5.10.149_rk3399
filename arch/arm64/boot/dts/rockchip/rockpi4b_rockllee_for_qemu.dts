/dts-v1/;

/ {
	interrupt-parent = <&gic>; /* 各个有 interrupts 描述信息的节点，可以通过这里的描述来找到对应的父节点中断控制器，从而知道自己解析中断的相关的配置信息，比如interrupt-cells */
	#size-cells = <0x02>;
	#address-cells = <0x02>;
	compatible = "linux,dummy-virt";

	memory@5EA00000 {
		reg = <0x00 0x5EA00000 0x00 0x40000000>;
		device_type = "memory";
	};

/*
	pl011@f6ff0000 {
		clock-names = "uartclk\0apb_pclk";
		clocks = <&apbpclk &apbpclk>;
		interrupts = <0x00 0x01 0x04>;
		reg = <0x00 0xf6ff0000 0x00 0x1000>;
		compatible = "arm,pl011\0arm,primecell";
	};
*/
	uart2:serial@ff1a0000 {
		compatible = "rockchip,rk3399-uart", "snps,dw-apb-uart";
		reg = <0x0 0xff1a0000 0x0 0x100>;
		clocks = <&apbpclk &apbpclk>;
		clock-names = "baudclk", "apb_pclk";
		/* interrupts = <0x00 100 4>; */
		interrupts = <0x00 2 0x04>; /* 2 + 32 = 34 */
		reg-shift = <0x02>;
		reg-io-width = <0x04>;
		status = "okay";
	};

	gic:intc@fee00000 {
		reg = <0x00 0xfee00000 0x00 0x10000>, /* GICD */
		      <0x00 0xfef00000 0x00 0xc0000>, /* GICR */
		      <0x00 0xfff00000 0x00 0x10000>, /* GICC */
		      <0x00 0xfff10000 0x00 0x10000>, /* GICH */
		      <0x00 0xfff20000 0x00 0x10000>; /* GICV */
		compatible = "arm,gic-v3";
		ranges;
		#size-cells = <0x02>;
		#address-cells = <0x02>;
		interrupt-controller;
		#interrupt-cells = <0x03>;
	};

	timer {
		interrupts = <0x01 13 0xf04>, /* ARCH_TIMER_PHYS_SECURE_PPI ==> #interrupt-cells = <0x03> ==> !!! 0x10 is offset just !!! ==> 13为十进制 ==> hwirq = 13 + 16 = 29 */
					 <0x01 14 0xf04>, /* ARCH_TIMER_PHYS_NONSECURE_PPI */
					 <0x01 11 0xf04>, /* ARCH_TIMER_VIRT_PPI */
					 <0x01 10 0xf04>; /* ARCH_TIMER_HYP_PPI  */
		always-on;
		compatible = "arm,armv8-timer\0arm,armv7-timer";
	};

	psci {
		migrate = <0xc4000005>;
		cpu_on = <0xc4000003>;
		cpu_off = <0x84000002>;
		cpu_suspend = <0xc4000001>;
		method = "hvc";
		compatible = "arm,psci-1.0\0arm,psci-0.2\0arm,psci";
	};

	fw-cfg@6004000 {
		dma-coherent;
		reg = <0x00 0x6004000 0x00 0x18>;
		compatible = "qemu,fw-cfg-mmio";
	};

	cpus {
		#size-cells = <0x00>;
		#address-cells = <0x01>;

		cpu-map {

			socket0 {

				cluster0 {

					core0 {
						cpu = <0x8004>;
					};

					core1 {
						cpu = <0x8003>;
					};

					core2 {
						cpu = <0x8002>;
					};

					core3 {
						cpu = <0x8001>;
					};
				};
			};
		};

		cpu@0 {
			phandle = <0x8004>;
			reg = <0x00>;
			enable-method = "psci";
			compatible = "arm,cortex-a57";
			device_type = "cpu";
		};

		cpu@1 {
			phandle = <0x8003>;
			reg = <0x01>;
			enable-method = "psci";
			compatible = "arm,cortex-a57";
			device_type = "cpu";
		};

		cpu@2 {
			phandle = <0x8002>;
			reg = <0x02>;
			enable-method = "psci";
			compatible = "arm,cortex-a57";
			device_type = "cpu";
		};

		cpu@3 {
			phandle = <0x8001>;
			reg = <0x03>;
			enable-method = "psci";
			compatible = "arm,cortex-a57";
			device_type = "cpu";
		};
	};

	apbpclk:apb-pclk {
		phandle = <0x8000>;
		clock-output-names = "clk24mhz";
		clock-frequency = <0x16e3600>;
		#clock-cells = <0x00>;
		compatible = "fixed-clock";
	};

	chosen {
		linux,initrd-end = <0x67400000>;
		linux,initrd-start = <0x48000000>;
		/* bootargs = "root=/dev/ram0  ramdisk_size=14745600  nokaslr  console=ttyAMA0 earlycon=pl011,0xf6ff0000 loglevel=8 rw "; */
		/* roclpi4b 上用的是 console=ttyS2 ==> 因为他确实有多个串口，而且用的就是第2个串口； 而qemu上只模拟了一个串口，所以需要用 ttyS0 */
		bootargs = "root=/dev/ram0  ramdisk_size=14745600  nokaslr earlycon=pl011,0xf6ff0000  console=ttyS0,1500000n8 loglevel=8 rw ";
		/* stdout-path = "/pl011@0xf6ff0000"; */
		stdout-path = "uart2:1500000n8";
		kaslr-seed = <0x00 0x00>;
	};
};